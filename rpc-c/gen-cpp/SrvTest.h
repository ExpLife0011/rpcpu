/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SrvTest_H
#define SrvTest_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "ss_types.h"

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SrvTestIf {
 public:
  virtual ~SrvTestIf() {}
  virtual void RpcTest(const Test& test) = 0;
};

class SrvTestIfFactory {
 public:
  typedef SrvTestIf Handler;

  virtual ~SrvTestIfFactory() {}

  virtual SrvTestIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SrvTestIf* /* handler */) = 0;
};

class SrvTestIfSingletonFactory : virtual public SrvTestIfFactory {
 public:
  SrvTestIfSingletonFactory(const boost::shared_ptr<SrvTestIf>& iface) : iface_(iface) {}
  virtual ~SrvTestIfSingletonFactory() {}

  virtual SrvTestIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SrvTestIf* /* handler */) {}

 protected:
  boost::shared_ptr<SrvTestIf> iface_;
};

class SrvTestNull : virtual public SrvTestIf {
 public:
  virtual ~SrvTestNull() {}
  void RpcTest(const Test& /* test */) {
    return;
  }
};

typedef struct _SrvTest_RpcTest_args__isset {
  _SrvTest_RpcTest_args__isset() : test(false) {}
  bool test :1;
} _SrvTest_RpcTest_args__isset;

class SrvTest_RpcTest_args {
 public:

  SrvTest_RpcTest_args(const SrvTest_RpcTest_args&);
  SrvTest_RpcTest_args& operator=(const SrvTest_RpcTest_args&);
  SrvTest_RpcTest_args() {
  }

  virtual ~SrvTest_RpcTest_args() throw();
  Test test;

  _SrvTest_RpcTest_args__isset __isset;

  void __set_test(const Test& val);

  bool operator == (const SrvTest_RpcTest_args & rhs) const
  {
    if (!(test == rhs.test))
      return false;
    return true;
  }
  bool operator != (const SrvTest_RpcTest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SrvTest_RpcTest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SrvTest_RpcTest_pargs {
 public:


  virtual ~SrvTest_RpcTest_pargs() throw();
  const Test* test;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SrvTest_RpcTest_result {
 public:

  SrvTest_RpcTest_result(const SrvTest_RpcTest_result&);
  SrvTest_RpcTest_result& operator=(const SrvTest_RpcTest_result&);
  SrvTest_RpcTest_result() {
  }

  virtual ~SrvTest_RpcTest_result() throw();

  bool operator == (const SrvTest_RpcTest_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SrvTest_RpcTest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SrvTest_RpcTest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SrvTest_RpcTest_presult {
 public:


  virtual ~SrvTest_RpcTest_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SrvTestClient : virtual public SrvTestIf {
 public:
  SrvTestClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SrvTestClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void RpcTest(const Test& test);
  void send_RpcTest(const Test& test);
  void recv_RpcTest();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SrvTestProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SrvTestIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SrvTestProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_RpcTest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SrvTestProcessor(boost::shared_ptr<SrvTestIf> iface) :
    iface_(iface) {
    processMap_["RpcTest"] = &SrvTestProcessor::process_RpcTest;
  }

  virtual ~SrvTestProcessor() {}
};

class SrvTestProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SrvTestProcessorFactory(const ::boost::shared_ptr< SrvTestIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SrvTestIfFactory > handlerFactory_;
};

class SrvTestMultiface : virtual public SrvTestIf {
 public:
  SrvTestMultiface(std::vector<boost::shared_ptr<SrvTestIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SrvTestMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SrvTestIf> > ifaces_;
  SrvTestMultiface() {}
  void add(boost::shared_ptr<SrvTestIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void RpcTest(const Test& test) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcTest(test);
    }
    ifaces_[i]->RpcTest(test);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SrvTestConcurrentClient : virtual public SrvTestIf {
 public:
  SrvTestConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SrvTestConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void RpcTest(const Test& test);
  int32_t send_RpcTest(const Test& test);
  void recv_RpcTest(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
