/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ss_TYPES_H
#define ss_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class Test;

typedef struct _Test__isset {
  _Test__isset() : id(false), value(false) {}
  bool id :1;
  bool value :1;
} _Test__isset;

class Test {
 public:

  Test(const Test&);
  Test& operator=(const Test&);
  Test() : id(0), value(0) {
  }

  virtual ~Test() throw();
  int32_t id;
  int32_t value;

  _Test__isset __isset;

  void __set_id(const int32_t val);

  void __set_value(const int32_t val);

  bool operator == (const Test & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Test &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Test & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Test &a, Test &b);

inline std::ostream& operator<<(std::ostream& out, const Test& obj)
{
  obj.printTo(out);
  return out;
}



#endif
